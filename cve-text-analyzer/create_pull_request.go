package main

import (
	"fmt"
	"os"
	"path"
	"strings"

	"github.com/anchore/vulnerability-data-tools/cve-text-analyzer/internal/search"
	"github.com/anchore/vulnerability-data-tools/cve-text-analyzer/internal/util"
)

func createPullRequest(indexes search.Indexes, forkOrg, forkName, cveID string) {
	upstreamRepo := fmt.Sprintf("git@github.com:%s.git", upstreamID)

	util.RunAlways(tmpDir, "gh repo fork --org", forkOrg, "--fork-name", forkName, upstreamRepo)

	repo := fmt.Sprintf("git@github.com:%s/%s.git", forkOrg, forkName)
	clone(repo)

	util.RunAlways(repoDir(repo), "git remote add upstream", upstreamRepo)

	cveID = strings.ToUpper(cveID)
	branchName := "update-" + cveID

	util.RunAlways(repoDir(repo), fmt.Sprintf("git branch --no-track %s upstream/main", branchName))
	util.RunAlways(repoDir(repo), "git fetch upstream")

	util.Run(repoDir(repo), "git checkout", branchName)

	searchText := searchTextFromCVE(cveListDir, cveID)
	searchTerms := util.GetTextTerms(searchText)

	matches := indexes.LookupProduct(searchTerms)
	matches = filterMatchesByConfidence(matches, confidenceCutoff)
	if len(matches) == 0 {
		util.Log("no matches found above confidence", confidenceCutoff)
		return
	}
	match := matches[0]
	contents := nvdOverrideContents(match)
	year := cveYear(cveID)
	filePath := path.Join("data", year, cveID+".json")
	fullPath := path.Join(repoDir(repo), filePath)
	util.PanicOnError(os.MkdirAll(path.Dir(fullPath), os.ModePerm))
	util.PanicOnError(os.WriteFile(fullPath, contents, os.ModePerm))

	util.Run(repoDir(repo), "git add", filePath)

	appName := "Anchore vulnerability-data-tools/cve-text-analyzer"
	commitTitle := fmt.Sprintf("feat: add %s", cveID)
	commitBody := renderCommitBody(cveID, appName, searchText, match)

	if execute {
		util.Run(repoDir(repo), "git commit -m", commitTitle)
		util.Run(repoDir(repo), "git push --set-upstream origin", branchName)
		util.Run(repoDir(repo), "gh pr create --repo", upstreamID, "--title", commitTitle, "--body", commitBody, "--head", forkOrg+":"+branchName)
	} else {
		util.Log("git commit -m", commitTitle)
		util.Log("git push --set-upstream origin", branchName)
		util.Log("gh pr create --repo", upstreamID, "--title", commitTitle, "--body", commitBody, "--head", forkOrg+":"+branchName)
	}
}

func renderCommitBody(cveID string, appName string, searchText string, match search.Match) string {
	return fmt.Sprintf(`Add metadata for %s

Text:
%s

Generator: %s

Confidence: %.3f
`, cveID, util.PrefixLines(searchText, "> "), appName, match.Confidence)
}

func cveYear(cveID string) string {
	return strings.Split(cveID, "-")[1]
}
